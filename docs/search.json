<<<<<<< HEAD
[{"path":"/articles/DPchecker.html","id":"install-dp-checker","dir":"Articles","previous_headings":"","what":"Install DP checker","title":"DPchecker","text":"can install DPchecker part NPSdataverse using:","code":"install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/NPSdataverse\") library(NPSdataverse)"},{"path":[]},{"path":"/articles/DPchecker.html","id":"the-entire-package","dir":"Articles","previous_headings":"Check a data package","what":"The entire package","title":"DPchecker","text":"common use case DPchecker run single function, run_congruence_checks() run DPchecker tests . need fully constructed data package single folder consisting : * EML-formatted metadata file name ends _metadata.xml * UTF-8 encoded .csv files also need supply path data package. using Rstudio started new project, can put data package folder Rproject folder tell R find : data package somewhere else hard drive, describe path data package folder. example, data package folder folder called “nps_data” located Downloads folder (“username” username):","code":"run_congruence_checks(\"my_data_package_folder\") dp<-\"C:/Users/username/Downloads/my_data_package_folder\" run_congruence_checks(dp)"},{"path":"/articles/DPchecker.html","id":"metadata-only","dir":"Articles","previous_headings":"Check a data package","what":"Metadata only","title":"DPchecker","text":"cases, may want check just EML metadata file completeness without checking whether properly coincides data files (perhaps trouble shooting metadata issue sent just metadata file check). case, can restrict run_congruence_checks() function just check metadata elements:","code":"# In this case \"my_data_package_folder\" need only contain the metadata file but could include .csvs dp<-\"C:/Users/username/Downloads/my_data_package_folder\" run_congruence_checks(dp, check_metadata_only = TRUE)"},{"path":"/articles/DPchecker.html","id":"generate-a-log-file","dir":"Articles","previous_headings":"Check a data package","what":"Generate a log file","title":"DPchecker","text":"want generate log file run_congruence_checks() results can . log file may useful collaborating trouble shooting may simply handy records. Log files included data package upload. log file written directory Rproject default, can also specify directory saved .","code":"# save log file to current working directory: run_congruence_checks(dp, output_filename = \"congruence_log_YYYY-MM-DD\")  # save the log file to another directory: save_here <- \"C:/Users/username/Documents\" run_congruence_checks(dp, output_filename = \"congruence_log_YYYY-MM-DD\", output_dir = save_here)"},{"path":"/articles/DPchecker.html","id":"interpreting-results","dir":"Articles","previous_headings":"","what":"Interpreting results","title":"DPchecker","text":"DPchecker tests designed help data package creators produce high quality, complete data packages can fully leverage DataStore’s ability ingest machine-readable metadata, maximally useful downstream data users. set tests also useful data package reviewers. Passing test indicated green check mark (\\(\\checkmark\\)). test fails, may fail error (red \\(\\times\\)) warning (yellow exclamation mark, !). Errors must addressed prior upload. Please modify data package DPchecker return errors. Warnings helpful indications data package creator may want look something. may wrong, might unusual. instance, data package lacked taxonomic geographic coverage fail taxonomic geographic coverage test warning lacking taxonomy geography unusual, may incorrect. Warnings may also used alert data package creators best practices - instance abstract less 20 words long test produce warning suggesting data package creator consider writing informative abstract.","code":""},{"path":"/articles/DPchecker.html","id":"tests-conducted","dir":"Articles","previous_headings":"","what":"Tests conducted","title":"DPchecker","text":"DPchecker v0.3.0 runs two types tests: metadata tests tests determine whether metadata data files congruent. Metadata tests can broken two sub-categories, metadata compliance metadata completeness. tests run order run listed .","code":""},{"path":"/articles/DPchecker.html","id":"metadata-compliance","dir":"Articles","previous_headings":"Tests conducted","what":"Metadata compliance","title":"DPchecker","text":"tests determine whether metadata schema valid adheres rules data packages. require *_metadata.xml file run require data files present. include: metadata file schema valid (test_validate_schema()) filename used exactly metadata (test_dup_meta_entries()) version EML supported (test_metadata_version() Metadata indicates data file single-character field delimiter (test_delimiter()) Metadata indicates data file contains exactly one header row (test_header_num()) Metadata indicates data files footers (test_footer()) Metadata contains taxonomic coverage element (test_taxonomic_cov()) Metadata contains geographic coverage element (test_geographic_cov()) Metadata contains Digital Object Identifier (DOI) (test_doi()) Metadata contains URLs data file URLs correspond DOI (test_datatable_urls) Metadata contains publisher element (test_publisher()) Metadata indicates data column names begin letter contain spaces special characters (test_valid_fieldnames()) Metadata indicates file names letter contain special characters spaces. (test_valid_filenames())","code":""},{"path":"/articles/DPchecker.html","id":"required-eml-elements","dir":"Articles","previous_headings":"Tests conducted","what":"Required EML elements","title":"DPchecker","text":"tests ensure EML elements necessary DataStore properly extract metadata populate reference exist, correct location, properly formatted. elements also often aspects metadata passed repositories search engines DataCite data.gov google’s dataset search. Therefore, checks may throw warnings suggestions best practices - removing stray characters abstracts suggesting informative title title unusually short. Required EML element tests require *_metadata.xml file run require data files present. Publication date present correct ISO-8601 format (test_pub_date()) Data package title present metadata (test_dp_title()) Metadata states data created NPS (test_by_for_nps()) Metadata indicates publisher National Park Service (test_publisher_name()) Metadata indicates publisher state CO (test_publisher_state()) Metadata indicates publisher city Fort Colllins (test_publisher_city()) Metadata contains well formatted abstract data package (test_dp_abstract()) dataTables listed metadata unique file description (test_file_descript()) Metadata contains valid CUI code (test_cui_dissemination()) Metadata contains valid license name (test_license()) Metadata contains Intellectual Rights statement (test_int_rights() attributes listed metadata attribute definitions (test_attribute_defs()) attributes listed metadata storage types associated (test_storage_type()) attribute storage types valid values (test_storage_type())","code":""},{"path":"/articles/DPchecker.html","id":"metadata-and-data-congruence","dir":"Articles","previous_headings":"Tests conducted","what":"Metadata and Data Congruence","title":"DPchecker","text":"files check make sure values fields metadata file accurately corresponds data files supplied. test require entire data package - *_metadata.xml file data files (*.csv) must present. data files listed metadata metadata file names refer data files (test_file_name_match()) columns data match columns metadata (test_fields_match()) Columns indicated numeric metadata contain numeric values missing value codes data (test_numeric_fields()) Columns indicated date/time metadata contain values fall within stated temporal coverage metadata (test_date_range())","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Baker. Maintainer, author. Sarah E. Wright. Author. Issac Quevedo. Contributor. Amelia Sherman. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker R, Wright SE (2023). DPchecker: Checks Data Packages Congruence. R package version 0.3.0, https://nationalparkservice.github.io/DPchecker/.","code":"@Manual{,   title = {DPchecker: Checks Data Packages for Congruence},   author = {Rob Baker and Sarah E. Wright},   year = {2023},   note = {R package version 0.3.0},   url = {https://nationalparkservice.github.io/DPchecker/}, }"},{"path":[]},{"path":"/index.html","id":"v030","dir":"","previous_headings":"","what":"v0.3.0","title":"Checks Data Packages for Congruence","text":"DPchecker (Data Package checker) package series functions NPS data package authors reviewers check internal consistency among data/meta data data package standards. Currently, EML metadata .csv data files supported. recommended store data files single metadata file (filename must end “metadata.xml”) directory. function runs single check imports data metadata necessary. prefer run checks , can use run_congruence_checks().","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Checks Data Packages for Congruence","text":"can install development version DPchecker GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/DPchecker\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples:","title":"Checks Data Packages for Congruence","text":"Run checks : Verify file names column names metadata match data:","code":"library(DPchecker)  # Get the directory where example data is stored (alternately, replace this with the path to your data folder)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  # Run all checks and summarize results  run_congruence_checks(dir)  # Alternately, if your data package is stored in the root of your R project folder, you don't need to pass any arguments run_congruence_checks() library(DPchecker)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  test_file_name_match(dir) test_fields_match(dir)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 DPchecker authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/convert_datetime_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EML date/time format string to one that R can parse — convert_datetime_format","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"Convert EML date/time format string one R can parse","code":""},{"path":"/reference/convert_datetime_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"","code":"convert_datetime_format(eml_format_string)"},{"path":"/reference/convert_datetime_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"eml_format_string character vector EML date/time format strings. function understands following codes: YYYY = four digit year, YY = two digit year, MMM = three letter month abbrev., MM = two digit month, DD = two digit day, hh HH = 24 hour time, mm = minutes, ss SS = seconds.","code":""},{"path":"/reference/convert_datetime_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"character vector date/time format strings can parsed readr strptime.","code":""},{"path":"/reference/convert_datetime_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"convert_datetime_format() sophisticated function. EML format string valid, happily without complaint return R format string break code. warned.","code":""},{"path":"/reference/convert_datetime_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"","code":"convert_datetime_format(\"MM/DD/YYYY\") #> [1] \"%m/%d/%Y\" convert_datetime_format(c(\"MM/DD/YYYY\", \"YY-MM-DD\")) #> [1] \"%m/%d/%Y\" \"%y-%m-%d\""},{"path":"/reference/DPchecker-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Allows user (reviewer) check data package test whether meets congruence standards set forth NPS upload DataStore datapackage.","code":""},{"path":[]},{"path":"/reference/DPchecker-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Maintainer: Rob Baker robert_baker@nps.gov (ORCID) Authors: Sarah E. Wright sarah_wright@nps.gov contributors: Issac Quevedo [contributor] Amelia Sherman [contributor]","code":""},{"path":"/reference/DPchecker_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate path to example data — DPchecker_example","title":"Generate path to example data — DPchecker_example","text":"Generate path example data","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example(dp_name = c(\"BICY_veg\", \"BUIS_herps\"))"},{"path":"/reference/DPchecker_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate path to example data — DPchecker_example","text":"dp_name Name data package.","code":""},{"path":"/reference/DPchecker_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate path to example data — DPchecker_example","text":"Path example data, dp_name specified.","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example() #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"C:/Users/rlbaker/Documents/RDev/DPchecker_devspace/inst/extdata/BICY_veg\" DPchecker_example(\"BUIS_herps\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"C:/Users/rlbaker/Documents/RDev/DPchecker_devspace/inst/extdata/BUIS_herps\""},{"path":"/reference/is_eml.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if metadata is eml object — is_eml","title":"Check if metadata is eml object — is_eml","text":"Helper function validate argument belongs emld class.","code":""},{"path":"/reference/is_eml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if metadata is eml object — is_eml","text":"","code":"is_eml(metadata)"},{"path":"/reference/is_eml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if metadata is eml object — is_eml","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data — load_data","title":"Load Data — load_data","text":"load_data() inspects working directory data files. Loads existing data files tibble.","code":""},{"path":"/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data — load_data","text":"","code":"load_data(directory = here::here())"},{"path":"/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data — load_data","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory.","code":""},{"path":"/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data — load_data","text":"tibble .csvs","code":""},{"path":"/reference/load_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Data — load_data","text":"loads data files specified directory (default working directory) tibble later use congruence checking. Returns user working directory upon exit. Currently supports .csv files.","code":""},{"path":"/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data — load_data","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_data <- load_data(data_pkg_dir)"},{"path":"/reference/load_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Metadata — load_metadata","title":"Load Metadata — load_metadata","text":"load_metadata() loads metadata file given path directory.","code":""},{"path":"/reference/load_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Metadata — load_metadata","text":"","code":"load_metadata(directory = here::here(), inform_success = FALSE)"},{"path":"/reference/load_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Metadata — load_metadata","text":"directory directory metadata file found - .e. data package. Defaults current project directory. inform_success Boolean indicating whether display message metadata successfully loaded.","code":""},{"path":"/reference/load_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Metadata — load_metadata","text":"R-object formatted EML metadata.","code":""},{"path":"/reference/load_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Metadata — load_metadata","text":"Given path directory - default working directory -  load_metadata() looks files ending *_metadata.xml. function quits error tells user files found one file found. one metadata file found, checked one 3 formats: FGDC, ISO, EML. Currently EML supported function fail error, inform user, quit non-EML metadata found. EML metadata file loaded R's work space future use congruence checking. context National Park Service data packages, function can slightly easier use loading metadata R EML::read_eml() require filename type specified.","code":""},{"path":"/reference/load_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Metadata — load_metadata","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_metadata <- load_metadata(data_pkg_dir)"},{"path":"/reference/run_congruence_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all congruence checks — run_congruence_checks","title":"Run all congruence checks — run_congruence_checks","text":"Run congruence checks","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all congruence checks — run_congruence_checks","text":"","code":"run_congruence_checks(   directory = here::here(),   metadata = load_metadata(directory),   check_metadata_only = FALSE,   output_filename,   output_dir = here::here() )"},{"path":"/reference/run_congruence_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all congruence checks — run_congruence_checks","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. check_metadata_only run checks metadata skip anything involving data files. output_filename Optional. specified, saves results congruence checks file. omitted, prints results console. file already exists, results appended existing file. output_dir Location save output file, using.","code":""},{"path":"/reference/run_congruence_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all congruence checks — run_congruence_checks","text":"Invisibly returns metadata.","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all congruence checks — run_congruence_checks","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. run_congruence_checks(dir) #>  #> ── Running all congruence checks ─────────────────────────────────────────────── #>  #> ── Reading metadata ── #>  #> ── Checking metadata compliance ── #>  #> ✔ Your metadata is schema valid. #> ✔ Each data file name is used exactly once in the metadata file. #> ✔ Your EML version is supported. #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character #> ✔ Metadata indicates that each data file contains exactly one header row. #> ✔ Metadata indicates data files do not have footers. #> ✔ Metadata contains taxonomic coverage element. #> ✔ Metadata contains geographic coverage element #> Error in \"lapply(text, glue_cmd, .envir = .envir)\": ! Invalid cli literal: `{.valdoi: …}` starts with a dot. #> ℹ Interpreted literals must not start with a dot in cli >= 3.4.0. #> ℹ `{}` expressions starting with a dot are now only used for cli styles. #> ℹ To avoid this error, put a space character after the starting `{` or use #>   parentheses: `{(.valdoi: …)}`."},{"path":"/reference/test_attribute_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Test metadata for attribute definitions — test_attribute_defs","title":"Test metadata for attribute definitions — test_attribute_defs","text":"test_attribute_defs() extracts attributeNames attributeDefinitions EML metadata. tests make sure number attributeNames attributeDefinitions. true, test passes. , fails error. test looks metadata, look data files. Passing test mean data columns attributes metadata associated . test , see test_fields_match().","code":""},{"path":"/reference/test_attribute_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test metadata for attribute definitions — test_attribute_defs","text":"","code":"test_attribute_defs(metadata = load_metadata(directory))"},{"path":"/reference/test_attribute_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test metadata for attribute definitions — test_attribute_defs","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_attribute_defs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test metadata for attribute definitions — test_attribute_defs","text":"invisibly returns metadata","code":""},{"path":"/reference/test_attribute_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test metadata for attribute definitions — test_attribute_defs","text":"","code":"if (FALSE) { test_attribute_defs() }"},{"path":"/reference/test_by_for_nps.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for ","title":"Test for ","text":"Test \"NPS\"","code":""},{"path":"/reference/test_by_for_nps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for ","text":"","code":"test_by_for_nps(metadata = load_metadata(directory))"},{"path":"/reference/test_by_for_nps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for ","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_by_for_nps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for ","text":"invisibly returns metadata","code":""},{"path":"/reference/test_by_for_nps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for ","text":"test_by_for_nps() test presence \"NPS\" field. test fails error information missing metadata. test fails warning metadata indicate data created NPS (expected relatively rare). Otherwise test passes.","code":""},{"path":"/reference/test_by_for_nps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for ","text":"","code":"if (FALSE) { test_by_for_nps() }"},{"path":"/reference/test_cui_dissemination.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for CUI dissemination code — test_cui_dissemination","title":"Test for CUI dissemination code — test_cui_dissemination","text":"test_cui_dissemination() examines EML metadata presence Controlled Unclassified Information (CUI) dissemination code. function fails error code exist match list valid codes. valid code \"PUBLIC\" test produce warning. valid code results pass.","code":""},{"path":"/reference/test_cui_dissemination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for CUI dissemination code — test_cui_dissemination","text":"","code":"test_cui_dissemination(metadata = load_metadata(directory))"},{"path":"/reference/test_cui_dissemination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for CUI dissemination code — test_cui_dissemination","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_cui_dissemination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for CUI dissemination code — test_cui_dissemination","text":"invisibly returns metadata","code":""},{"path":"/reference/test_cui_dissemination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for CUI dissemination code — test_cui_dissemination","text":"","code":"if (FALSE) { test_cui_dissemination() }"},{"path":"/reference/test_datatable_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for consistency in data file URLs — test_datatable_urls","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"test_datatable_urls Checks make sure URLs listed data files correctly correspond DOI metadata. last 7 digits URL data tables identical last 7 digits DOI, test passes. DOI, test fails warning. data table lacks URL, test fails error. data table URL's last 7 digits identical DOI's last 7 digits, test fails error.","code":""},{"path":"/reference/test_datatable_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"","code":"test_datatable_urls(metadata = load_metadata(directory))"},{"path":"/reference/test_datatable_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"metadata","code":""},{"path":"/reference/test_datatable_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"invisible(metadata)","code":""},{"path":"/reference/test_datatable_urls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"suggestions functions use correct errors/warnings provided.","code":""},{"path":"/reference/test_datatable_urls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_datatable_urls(dir) #> Error: ✖ `metadata` must be an EML object."},{"path":"/reference/test_date_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Date Range — test_date_range","title":"Test Date Range — test_date_range","text":"test_date_range() verifies dates dataset consistent date range metadata.","code":""},{"path":"/reference/test_date_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Date Range — test_date_range","text":"","code":"test_date_range(directory = here::here(), metadata = load_metadata(directory))"},{"path":"/reference/test_date_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Date Range — test_date_range","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_date_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Date Range — test_date_range","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_date_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Date Range — test_date_range","text":"function checks columns identified date/time metadata. metadata lacks date range, function fails warning. fails warning dates contained columns outside temporal coverage specified metadata. date/time format string specified metadata match actual format date CSV, likely fail parse result failing test error. test also inform user file columns causing test fail failing (.e. outside date range failed parse).","code":""},{"path":"/reference/test_date_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Date Range — test_date_range","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_date_range(dir) #> ✔ Columns indicated as date/time in metadata are within the stated temporal #>   coverage range."},{"path":"/reference/test_delimiter.html","id":null,"dir":"Reference","previous_headings":"","what":"Field Delimiter Check — test_delimiter","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter() checks metadata file ensures data file field delimiter exactly one character (e.g. \", \").","code":""},{"path":"/reference/test_delimiter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Field Delimiter Check — test_delimiter","text":"","code":"test_delimiter(metadata = load_metadata(here::here()))"},{"path":"/reference/test_delimiter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Field Delimiter Check — test_delimiter","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_delimiter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Field Delimiter Check — test_delimiter","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_delimiter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter() examines fieldDelimiter element EML (currently EML supported) metadata determine many characters . fieldDelimiter element, test returns error. field delimiter anything exactly one character length, test returns error.","code":""},{"path":"/reference/test_delimiter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Field Delimiter Check — test_delimiter","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_delimiter(meta) #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character"},{"path":"/reference/test_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for presence of a Digital Object Identifier — test_doi","title":"Check for presence of a Digital Object Identifier — test_doi","text":"test_doi() checks whether DOI data package present metadata. currently validate DOI. DOI present, test passes. DOI present, test fails warning.","code":""},{"path":"/reference/test_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for presence of a Digital Object Identifier — test_doi","text":"","code":"test_doi(metadata = load_metadata(directory))"},{"path":"/reference/test_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for presence of a Digital Object Identifier — test_doi","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for presence of a Digital Object Identifier — test_doi","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for presence of a Digital Object Identifier — test_doi","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_doi(meta) #> Error in \"lapply(text, glue_cmd, .envir = .envir)\": ! Invalid cli literal: `{.valdoi: …}` starts with a dot. #> ℹ Interpreted literals must not start with a dot in cli >= 3.4.0. #> ℹ `{}` expressions starting with a dot are now only used for cli styles. #> ℹ To avoid this error, put a space character after the starting `{` or use #>   parentheses: `{(.valdoi: …)}`."},{"path":"/reference/test_dp_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML abstract — test_dp_abstract","title":"Test EML abstract — test_dp_abstract","text":"test_dp_abstract() inspects EML presence data package abstract. test Fails error abstract absent. abstract present, test fails warning abstract <20 words, >250 words, contains subset common characters indicate improper formatting. Otherwise test passes.","code":""},{"path":"/reference/test_dp_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML abstract — test_dp_abstract","text":"","code":"test_dp_abstract(metadata = load_metadata(directory))"},{"path":"/reference/test_dp_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML abstract — test_dp_abstract","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_dp_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML abstract — test_dp_abstract","text":"invisibly returns metadata","code":""},{"path":"/reference/test_dp_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML abstract — test_dp_abstract","text":"","code":"if (FALSE) { test_dp_abstract() }"},{"path":"/reference/test_dp_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data package title — test_dp_title","title":"Test data package title — test_dp_title","text":"test_dp_title() tests EML metadata presence data package title. test fails error title absent. test fails warning title > 20 < 5 words. Otherwise, test passes.","code":""},{"path":"/reference/test_dp_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data package title — test_dp_title","text":"","code":"test_dp_title(metadata = load_metadata(directory))"},{"path":"/reference/test_dp_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test data package title — test_dp_title","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_dp_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test data package title — test_dp_title","text":"invisibly returns metadata","code":""},{"path":"/reference/test_dp_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test data package title — test_dp_title","text":"","code":"if (FALSE) { test_dp_title() }"},{"path":"/reference/test_dup_meta_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"test_dup_meta_entries() tests see whether duplicate filenames listed data files (EML) metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"test_dup_meta_entries(metadata = load_metadata(here::here()))"},{"path":"/reference/test_dup_meta_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"specifically, test_dup_meta_entries() looks 'physical' elements metadata file, describe data file, asks whether duplicates entries objectName child element, file name data file stored. Duplicate entries result test failing error.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_dup_meta_entries(meta) #> ✔ Each data file name is used exactly once in the metadata file."},{"path":"/reference/test_fields_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Matching Data/Metadata Fields — test_fields_match","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match() compares attributes dataTable within EML metadata columns corresponding .csv. columns names order, test passes. columns differ, test fails error.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"test_fields_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_fields_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_fields_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_fields_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match briefly checks data files match, really run test_file_name_match() run test.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_fields_match(dir) #> ✔ All columns in data match all columns in metadata."},{"path":"/reference/test_file_descript.html","id":null,"dir":"Reference","previous_headings":"","what":"Test presence of file descriptions — test_file_descript","title":"Test presence of file descriptions — test_file_descript","text":"test_file_descript() tests presence file descriptions (entityDescription) fields. fails error one entityDescription fields empty dataTable. fails error two file descriptions identical. test fails warning file description longer 10 words shorter three words. Otherwise test passes.","code":""},{"path":"/reference/test_file_descript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test presence of file descriptions — test_file_descript","text":"","code":"test_file_descript(metadata = load_metadata(directory))"},{"path":"/reference/test_file_descript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test presence of file descriptions — test_file_descript","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_file_descript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test presence of file descriptions — test_file_descript","text":"invisibly returns metadata","code":""},{"path":"/reference/test_file_descript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test presence of file descriptions — test_file_descript","text":"","code":"if (FALSE) { test_file_descript() }"},{"path":"/reference/test_file_name_match.html","id":null,"dir":"Reference","previous_headings":"","what":"File Name Match — test_file_name_match","title":"File Name Match — test_file_name_match","text":"test_file_name_match() checks see whether data files (.csv) within specified directory listed objectName (child physical) element EML metadata file directory, vice versa. Mismatches result test failing error message.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Name Match — test_file_name_match","text":"","code":"test_file_name_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_file_name_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Name Match — test_file_name_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_file_name_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File Name Match — test_file_name_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_file_name_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File Name Match — test_file_name_match","text":"directory current working directory specified, test.file_name_match() returns current working directory exit. Note metadata file must follow NPS naming conventions, specifically ending *_metadata.xml. test.file_name_match() assumes number data files directory dataTables metadata file.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Name Match — test_file_name_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_file_name_match(dir) #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files."},{"path":"/reference/test_footer.html","id":null,"dir":"Reference","previous_headings":"","what":"Footer Check — test_footer","title":"Footer Check — test_footer","text":"test_footer() checks metadata files determine whether data files contain footer lines .","code":""},{"path":"/reference/test_footer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footer Check — test_footer","text":"","code":"test_footer(metadata = load_metadata(here::here()))"},{"path":"/reference/test_footer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footer Check — test_footer","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_footer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footer Check — test_footer","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_footer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Footer Check — test_footer","text":"footer lines present, data package passes test. footer lines present, data package fails test error user instructed remove footer lines prior data package upload. Currently EML metadata supported.","code":""},{"path":"/reference/test_footer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footer Check — test_footer","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_footer(meta) #> ✔ Metadata indicates data files do not have footers."},{"path":"/reference/test_geographic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Geographic Coverage — test_geographic_cov","title":"Check for Geographic Coverage — test_geographic_cov","text":"test_geographic_cov() checks geographic coverage element present metadata. perform validation geographic coverage information. geographicCoverage element present, test passes. absent, test fails warning.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Geographic Coverage — test_geographic_cov","text":"","code":"test_geographic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_geographic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Geographic Coverage — test_geographic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_geographic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Geographic Coverage — test_geographic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Geographic Coverage — test_geographic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_geographic_cov(meta) #> ✔ Metadata contains geographic coverage element"},{"path":"/reference/test_header_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Check — test_header_num","title":"Header Check — test_header_num","text":"test_header_num() checks metadata files ensure data file contains exactly one header row.","code":""},{"path":"/reference/test_header_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Check — test_header_num","text":"","code":"test_header_num(metadata = load_metadata(here::here()))"},{"path":"/reference/test_header_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Check — test_header_num","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_header_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Check — test_header_num","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_header_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Header Check — test_header_num","text":"test_header_num() examines numHeaderLines element EML (currently EML supported) metadata determine many header rows . header rows one header row, test fails error. test also fails error information number header rows.","code":""},{"path":"/reference/test_header_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Header Check — test_header_num","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_header_num(meta) #> ✔ Metadata indicates that each data file contains exactly one header row."},{"path":"/reference/test_int_rights.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of Intellectual Rights — test_int_rights","title":"Test for presence of Intellectual Rights — test_int_rights","text":"test_int_rights() tests presence text within intellectualRights element EML formatted metadata. text present, test passes. Otherwise, test fails. test_int_rights() makes attempt parse text test whether properly coincides CUI dissemination codes licenseName metadata. simple presence/absence test.","code":""},{"path":"/reference/test_int_rights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of Intellectual Rights — test_int_rights","text":"","code":"test_int_rights(metadata = load_metadata(directory))"},{"path":"/reference/test_int_rights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of Intellectual Rights — test_int_rights","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_int_rights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of Intellectual Rights — test_int_rights","text":"invisibly returns metadata","code":""},{"path":"/reference/test_int_rights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of Intellectual Rights — test_int_rights","text":"","code":"if (FALSE) { test_int_rights() }"},{"path":"/reference/test_license.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of a license name — test_license","title":"Test for presence of a license name — test_license","text":"test_license() examines licenseName element EML metadata. license name, test fails ab error. license name match list valid license names, test fails. metadata contain valid license name, license name CUI dissemination code agree, test fails error. Otherwise, test passes.  Additionally, license name \"Public Domain\" \"CC0 1.0 Universal\", function produce warning data package public.","code":""},{"path":"/reference/test_license.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of a license name — test_license","text":"","code":"test_license(metadata = load_metadata(directory))"},{"path":"/reference/test_license.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of a license name — test_license","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_license.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of a license name — test_license","text":"invisibly returns metadata","code":""},{"path":"/reference/test_license.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of a license name — test_license","text":"","code":"if (FALSE) { test_license() }"},{"path":"/reference/test_metadata_version.html","id":null,"dir":"Reference","previous_headings":"","what":"EML Version Check — test_metadata_version","title":"EML Version Check — test_metadata_version","text":"test_metadata_version() determines whether version metadata supplied meets current criteria NPS data package.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EML Version Check — test_metadata_version","text":"","code":"test_metadata_version(metadata = load_metadata(here::here()))"},{"path":"/reference/test_metadata_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EML Version Check — test_metadata_version","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_metadata_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EML Version Check — test_metadata_version","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_metadata_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EML Version Check — test_metadata_version","text":"currently EML supported. EML must version >= 2.2.0.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EML Version Check — test_metadata_version","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_metadata_version(meta) #> ✔ Your EML version is supported."},{"path":"/reference/test_numeric_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Numeric Fields — test_numeric_fields","title":"Test Numeric Fields — test_numeric_fields","text":"test_numeric_fields() verifies columns listed numeric metadata free non-numeric data. non-numeric data encountered, test fails error.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"test_numeric_fields(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_numeric_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Numeric Fields — test_numeric_fields","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_numeric_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Numeric Fields — test_numeric_fields","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_numeric_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Numeric Fields — test_numeric_fields","text":"\"NA\" missing data codes documented metadata cause test fail. Note test assumes column types metadata intended types, .e., metadata says column text actually numeric, caught test. hand, metadata indicates text column numeric, function generate error.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_numeric_fields(dir) #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes."},{"path":"/reference/test_publisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Publisher — test_publisher","title":"Check for Publisher — test_publisher","text":"test_publisher() checks publisher information present metadata, option require valid NPS publisher information. publisher information present, test passes. publisher information absent, test fails error. require_nps set TRUE (defaults FALSE), test also ensure valid NPS publisher information present. case, even publisher element present, test fail error unless publisher NPS (publisher fields exactly match expected information NPS data packages).","code":""},{"path":"/reference/test_publisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Publisher — test_publisher","text":"","code":"test_publisher(metadata = load_metadata(directory), require_nps = FALSE)"},{"path":"/reference/test_publisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Publisher — test_publisher","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. require_nps TRUE, throw error publisher information correct NPS published data.","code":""},{"path":"/reference/test_publisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Publisher — test_publisher","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_publisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Publisher — test_publisher","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_publisher(meta) #> ✔ Metadata contains publisher element."},{"path":"/reference/test_publisher_city.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML metadata for publisher city — test_publisher_city","title":"Test EML metadata for publisher city — test_publisher_city","text":"test_publisher_city() inspects publisher address EML metadata. fails error city element empty. fails warning \"Fort Collins\". test passes \"Fort Collins\"","code":""},{"path":"/reference/test_publisher_city.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML metadata for publisher city — test_publisher_city","text":"","code":"test_publisher_city(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_city.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML metadata for publisher city — test_publisher_city","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_publisher_city.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML metadata for publisher city — test_publisher_city","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_city.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML metadata for publisher city — test_publisher_city","text":"","code":"if (FALSE) { test_publisher_city() }"},{"path":"/reference/test_publisher_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests EML metadata for the publisher name — test_publisher_name","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"Tests EML metadata publisher name","code":""},{"path":"/reference/test_publisher_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"","code":"test_publisher_name(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_publisher_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"test_publisher_name() test presence data package publisher name. fails error publisher name missing, fails warning publisher name \"National Park Service\" (expected rare). Passes test publisher name \"National Park Service\"","code":""},{"path":"/reference/test_publisher_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"","code":"if (FALSE) { test_publisher_name() }"},{"path":"/reference/test_publisher_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML metadata for publisher state — test_publisher_state","title":"Test EML metadata for publisher state — test_publisher_state","text":"test_publisher_state() inspects publisher address EML metadata. test faisl error administrativeArea (state) element empty. test fails warning \"CO\" (, expected exceedingly rare). test passes \"CO\".","code":""},{"path":"/reference/test_publisher_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML metadata for publisher state — test_publisher_state","text":"","code":"test_publisher_state(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML metadata for publisher state — test_publisher_state","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_publisher_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML metadata for publisher state — test_publisher_state","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML metadata for publisher state — test_publisher_state","text":"","code":"if (FALSE) { test_publisher_state() }"},{"path":"/reference/test_pub_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Test publication date presence and ISO-8601 formatting — test_pub_date","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"test_pub_date() tests presence ISO-8601 formatting publication date. Also tests whether publication date within reasonable bounds; .e. date prior beginning data package Reference Type (2022) future year. publication date missing improperly formatted, test fails error. publication date outside reasonable range, test fails warning. Otherwiset test passes.","code":""},{"path":"/reference/test_pub_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"","code":"test_pub_date(metadata = load_metadata(directory))"},{"path":"/reference/test_pub_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_pub_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"invisibly returns metadata","code":""},{"path":"/reference/test_pub_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"","code":"if (FALSE) { meta <- load_metadata(DPchecker_example(\"BICY_Veg\")) test_pub_date(meta) }"},{"path":"/reference/test_storage_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests for attribute storage type — test_storage_type","title":"Tests for attribute storage type — test_storage_type","text":"test_storage_type() checks see number attributes (attributeName) storageTypes metadata. Equal numbers elements pass; unequal numbers fail test error. test_storage_type() attempt verify number storageType elements matches number columns data package data files (functionality, use test_fields_match()). test_storage_type() verifies storageType valid; .e. member accepted list possible storage types. Currently : string, float, date, factor, characters. Validity test based solely observed ezEML/EAL output (theory string storageType schema-valid). Invalid storageTypes result warning. test_storage_type() attempt verify value storageType logically matches type data corresponding column.","code":""},{"path":"/reference/test_storage_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests for attribute storage type — test_storage_type","text":"","code":"test_storage_type(metadata = load_metadata(directory))"},{"path":"/reference/test_storage_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests for attribute storage type — test_storage_type","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_storage_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests for attribute storage type — test_storage_type","text":"invisibly returns metadata","code":""},{"path":"/reference/test_storage_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests for attribute storage type — test_storage_type","text":"","code":"if (FALSE) { test_storage_type() }"},{"path":"/reference/test_taxonomic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Taxonomic Coverage — test_taxonomic_cov","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"'test_taxnomomic_cov()` checks whether taxonomic coverage element present metadata. perform validation taxonomic coverage information. taxonomic coverage present, test passes. absent, test fails warning.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"","code":"test_taxonomic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_taxonomic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_taxonomic_cov(meta) #> ✔ Metadata contains taxonomic coverage element."},{"path":"/reference/test_validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Metadata Schema — test_validate_schema","title":"Validate Metadata Schema — test_validate_schema","text":"test_validate_schema() inspects metadata object loaded R determines whether schema-valid. test fails, functio produces error message.","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"test_validate_schema(metadata = load_metadata(here::here()))"},{"path":"/reference/test_validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Metadata Schema — test_validate_schema","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Metadata Schema — test_validate_schema","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_validate_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Metadata Schema — test_validate_schema","text":"currently, EML supported. now just wrapper form EML::eml_validate().","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_validate_schema(meta) #> ✔ Your metadata is schema valid."},{"path":"/reference/test_valid_fieldnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Field Names for Invalid Characters — test_valid_fieldnames","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"test_valid_fieldnames() checks field names (e.g data column names) metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter. invalid column names exist, test fail warning, otherwise test passes.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"test_valid_fieldnames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_fieldnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"run test_fields_match() run function, since function checks field names metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_fieldnames(meta) #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters."},{"path":"/reference/test_valid_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test File Names for Invalid Characters — test_valid_filenames","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"test_valid_filenames() checks file names metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter. Currently, invalid filenames result test failing warning, otherwise test passes.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"test_valid_filenames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"run test_file_name_match() run function, since function checks file names metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_filenames(meta) #> ✔ File names begin with a letter and do not contain spaces or special #>   characters."}]
=======
[{"path":"/articles/DPchecker.html","id":"install-dp-checker","dir":"Articles","previous_headings":"","what":"Install DP checker","title":"DPchecker","text":"can install DPchecker part NPSdataverse using:","code":"install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/NPSdataverse\") library(NPSdataverse)"},{"path":[]},{"path":"/articles/DPchecker.html","id":"the-entire-package","dir":"Articles","previous_headings":"Check a data package","what":"The entire package","title":"DPchecker","text":"common use case DPchecker run single function, run_congruence_checks() run DPchecker tests . need fully constructed data package single folder consisting : * EML-formatted metadata file name ends _metadata.xml * UTF-8 encoded .csv files also need supply path data package. using Rstudio started new project, can put data package folder Rproject folder tell R find : data package somewhere else hard drive, describe path data package folder. example, data package folder folder called “nps_data” located Downloads folder (“username” username):","code":"run_congruence_checks(\"my_data_package_folder\") dp<-\"C:/Users/username/Downloads/my_data_package_folder\" run_congruence_checks(dp)"},{"path":"/articles/DPchecker.html","id":"metadata-only","dir":"Articles","previous_headings":"Check a data package","what":"Metadata only","title":"DPchecker","text":"cases, may want check just EML metadata file completeness without checking whether properly coincides data files (perhaps trouble shooting metadata issue sent just metadata file check). case, can restrict run_congruence_checks() function just check metadata elements:","code":"# In this case \"my_data_package_folder\" need only contain the metadata file but could include .csvs dp<-\"C:/Users/username/Downloads/my_data_package_folder\" run_congruence_checks(dp, check_metadata_only = TRUE)"},{"path":"/articles/DPchecker.html","id":"generate-a-log-file","dir":"Articles","previous_headings":"Check a data package","what":"Generate a log file","title":"DPchecker","text":"want generate log file run_congruence_checks() results can . log file may useful collaborating trouble shooting may simply handy records. Log files included data package upload. log file written directory Rproject default, can also specify directory saved .","code":"# save log file to current working directory: run_congruence_checks(dp, output_filename = \"congruence_log_YYYY-MM-DD\")  # save the log file to another directory: save_here <- \"C:/Users/username/Documents\" run_congruence_checks(dp, output_filename = \"congruence_log_YYYY-MM-DD\", output_dir = save_here)"},{"path":"/articles/DPchecker.html","id":"interpreting-results","dir":"Articles","previous_headings":"","what":"Interpreting results","title":"DPchecker","text":"DPchecker tests designed help data package creators produce high quality, complete data packages can fully leverage DataStore’s ability ingest machine-readable metadata, maximally useful downstream data users. set tests also useful data package reviewers. Passing test indicated green check mark (\\(\\checkmark\\)). test fails, may fail error (red \\(\\times\\)) warning (yellow exclamation mark, !). Errors must addressed prior upload. Please modify data package DPchecker return errors. Warnings helpful indications data package creator may want look something. may wrong, might unusual. instance, data package lacked taxonomic geographic coverage fail taxonomic geographic coverage test warning lacking taxonomy geography unusual, may incorrect. Warnings may also used alert data package creators best practices - instance abstract less 20 words long test produce warning suggesting data package creator consider writing informative abstract.","code":""},{"path":"/articles/DPchecker.html","id":"tests-conducted","dir":"Articles","previous_headings":"","what":"Tests conducted","title":"DPchecker","text":"DPchecker v0.3.0 runs two types tests: metadata tests tests determine whether metadata data files congruent. Metadata tests can broken two sub-categories, metadata compliance metadata completeness. tests run order run listed .","code":""},{"path":"/articles/DPchecker.html","id":"metadata-compliance","dir":"Articles","previous_headings":"Tests conducted","what":"Metadata compliance","title":"DPchecker","text":"tests determine whether metadata schema valid adheres rules data packages. require *_metadata.xml file run require data files present. include: metadata file schema valid (test_validate_schema()) filename used exactly metadata (test_dup_meta_entries()) version EML supported (test_metadata_version() Metadata indicates data file single-character field delimiter (test_delimiter()) Metadata indicates data file contains exactly one header row (test_header_num()) Metadata indicates data files footers (test_footer()) Metadata contains taxonomic coverage element (test_taxonomic_cov()) Metadata contains geographic coverage element (test_geographic_cov()) Metadata contains Digital Object Identifier (DOI) (test_doi()) Metadata contains URLs data file URLs correspond DOI (test_datatable_urls) Metadata contains publisher element (test_publisher()) Metadata indicates data column names begin letter contain spaces special characters (test_valid_fieldnames()) Metadata indicates file names letter contain special characters spaces. (test_valid_filenames())","code":""},{"path":"/articles/DPchecker.html","id":"required-eml-elements","dir":"Articles","previous_headings":"Tests conducted","what":"Required EML elements","title":"DPchecker","text":"tests ensure EML elements necessary DataStore properly extract metadata populate reference exist, correct location, properly formatted. elements also often aspects metadata passed repositories search engines DataCite data.gov google’s dataset search. Therefore, checks may throw warnings suggestions best practices - removing stray characters abstracts suggesting informative title title unusually short. Required EML element tests require *_metadata.xml file run require data files present. Publication date present correct ISO-8601 format (test_pub_date()) Data package title present metadata (test_dp_title()) Metadata states data created NPS (test_by_for_nps()) Metadata indicates publisher National Park Service (test_publisher_name()) Metadata indicates publisher state CO (test_publisher_state()) Metadata indicates publisher city Fort Colllins (test_publisher_city()) Metadata contains well formatted abstract data package (test_dp_abstract()) dataTables listed metadata unique file description (test_file_descript()) Metadata contains valid CUI code (test_cui_dissemination()) Metadata contains valid license name (test_license()) Metadata contains Intellectual Rights statement (test_int_rights() attributes listed metadata attribute definitions (test_attribute_defs()) attributes listed metadata storage types associated (test_storage_type()) attribute storage types valid values (test_storage_type())","code":""},{"path":"/articles/DPchecker.html","id":"metadata-and-data-congruence","dir":"Articles","previous_headings":"Tests conducted","what":"Metadata and Data Congruence","title":"DPchecker","text":"files check make sure values fields metadata file accurately corresponds data files supplied. test require entire data package - *_metadata.xml file data files (*.csv) must present. data files listed metadata metadata file names refer data files (test_file_name_match()) columns data match columns metadata (test_fields_match()) Columns indicated numeric metadata contain numeric values missing value codes data (test_numeric_fields()) Columns indicated date/time metadata contain values fall within stated temporal coverage metadata (test_date_range())","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Baker. Maintainer, author. Sarah E. Wright. Author. Issac Quevedo. Contributor. Amelia Sherman. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker R, Wright SE (2023). DPchecker: Checks Data Packages Congruence. R package version 0.3.0, https://nationalparkservice.github.io/DPchecker/.","code":"@Manual{,   title = {DPchecker: Checks Data Packages for Congruence},   author = {Rob Baker and Sarah E. Wright},   year = {2023},   note = {R package version 0.3.0},   url = {https://nationalparkservice.github.io/DPchecker/}, }"},{"path":[]},{"path":"/index.html","id":"v030","dir":"","previous_headings":"","what":"v0.3.0","title":"Checks Data Packages for Congruence","text":"DPchecker (Data Package checker) package series functions NPS data package authors reviewers check internal consistency among data/meta data data package standards. Currently, EML metadata .csv data files supported. recommended store data files single metadata file (filename must end “metadata.xml”) directory. function runs single check imports data metadata necessary. prefer run checks , can use run_congruence_checks().","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Checks Data Packages for Congruence","text":"can install development version DPchecker GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/DPchecker\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples:","title":"Checks Data Packages for Congruence","text":"Run checks : Verify file names column names metadata match data:","code":"library(DPchecker)  # Get the directory where example data is stored (alternately, replace this with the path to your data folder)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  # Run all checks and summarize results  run_congruence_checks(dir)  # Alternately, if your data package is stored in the root of your R project folder, you don't need to pass any arguments run_congruence_checks() library(DPchecker)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  test_file_name_match(dir) test_fields_match(dir)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 DPchecker authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/convert_datetime_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EML date/time format string to one that R can parse — convert_datetime_format","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"Convert EML date/time format string one R can parse","code":""},{"path":"/reference/convert_datetime_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"","code":"convert_datetime_format(eml_format_string)"},{"path":"/reference/convert_datetime_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"eml_format_string character vector EML date/time format strings. function understands following codes: YYYY = four digit year, YY = two digit year, MMM = three letter month abbrev., MM = two digit month, DD = two digit day, hh HH = 24 hour time, mm = minutes, ss SS = seconds.","code":""},{"path":"/reference/convert_datetime_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"character vector date/time format strings can parsed readr strptime.","code":""},{"path":"/reference/convert_datetime_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"convert_datetime_format() sophisticated function. EML format string valid, happily without complaint return R format string break code. warned.","code":""},{"path":"/reference/convert_datetime_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"","code":"convert_datetime_format(\"MM/DD/YYYY\") #> [1] \"%m/%d/%Y\" convert_datetime_format(c(\"MM/DD/YYYY\", \"YY-MM-DD\")) #> [1] \"%m/%d/%Y\" \"%y-%m-%d\""},{"path":"/reference/DPchecker-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Allows user (reviewer) check data package test whether meets congruence standards set forth NPS upload DataStore datapackage.","code":""},{"path":[]},{"path":"/reference/DPchecker-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Maintainer: Rob Baker robert_baker@nps.gov (ORCID) Authors: Sarah E. Wright sarah_wright@nps.gov contributors: Issac Quevedo [contributor] Amelia Sherman [contributor]","code":""},{"path":"/reference/DPchecker_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate path to example data — DPchecker_example","title":"Generate path to example data — DPchecker_example","text":"Generate path example data","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example(dp_name = c(\"BICY_veg\", \"BUIS_herps\"))"},{"path":"/reference/DPchecker_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate path to example data — DPchecker_example","text":"dp_name Name data package.","code":""},{"path":"/reference/DPchecker_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate path to example data — DPchecker_example","text":"Path example data, dp_name specified.","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example() #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"C:/Users/rlbaker/Documents/RDev/DPchecker_devspace/inst/extdata/BICY_veg\" DPchecker_example(\"BUIS_herps\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"C:/Users/rlbaker/Documents/RDev/DPchecker_devspace/inst/extdata/BUIS_herps\""},{"path":"/reference/is_eml.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if metadata is eml object — is_eml","title":"Check if metadata is eml object — is_eml","text":"Helper function validate argument belongs emld class.","code":""},{"path":"/reference/is_eml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if metadata is eml object — is_eml","text":"","code":"is_eml(metadata)"},{"path":"/reference/is_eml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if metadata is eml object — is_eml","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data — load_data","title":"Load Data — load_data","text":"load_data() inspects working directory data files. Loads existing data files tibble.","code":""},{"path":"/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data — load_data","text":"","code":"load_data(directory = here::here())"},{"path":"/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data — load_data","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory.","code":""},{"path":"/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data — load_data","text":"tibble .csvs","code":""},{"path":"/reference/load_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Data — load_data","text":"loads data files specified directory (default working directory) tibble later use congruence checking. Returns user working directory upon exit. Currently supports .csv files.","code":""},{"path":"/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data — load_data","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_data <- load_data(data_pkg_dir)"},{"path":"/reference/load_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Metadata — load_metadata","title":"Load Metadata — load_metadata","text":"load_metadata() loads metadata file given path directory.","code":""},{"path":"/reference/load_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Metadata — load_metadata","text":"","code":"load_metadata(directory = here::here(), inform_success = FALSE)"},{"path":"/reference/load_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Metadata — load_metadata","text":"directory directory metadata file found - .e. data package. Defaults current project directory. inform_success Boolean indicating whether display message metadata successfully loaded.","code":""},{"path":"/reference/load_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Metadata — load_metadata","text":"R-object formatted EML metadata.","code":""},{"path":"/reference/load_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Metadata — load_metadata","text":"Given path directory - default working directory -  load_metadata() looks files ending *_metadata.xml. function quits error tells user files found one file found. one metadata file found, checked one 3 formats: FGDC, ISO, EML. Currently EML supported function fail error, inform user, quit non-EML metadata found. EML metadata file loaded R's work space future use congruence checking. context National Park Service data packages, function can slightly easier use loading metadata R EML::read_eml() require filename type specified.","code":""},{"path":"/reference/load_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Metadata — load_metadata","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_metadata <- load_metadata(data_pkg_dir)"},{"path":"/reference/run_congruence_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all congruence checks — run_congruence_checks","title":"Run all congruence checks — run_congruence_checks","text":"Run congruence checks","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all congruence checks — run_congruence_checks","text":"","code":"run_congruence_checks(   directory = here::here(),   metadata = load_metadata(directory),   check_metadata_only = FALSE,   output_filename,   output_dir = here::here() )"},{"path":"/reference/run_congruence_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all congruence checks — run_congruence_checks","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. check_metadata_only run checks metadata skip anything involving data files. output_filename Optional. specified, saves results congruence checks file. omitted, prints results console. file already exists, results appended existing file. output_dir Location save output file, using.","code":""},{"path":"/reference/run_congruence_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all congruence checks — run_congruence_checks","text":"Invisibly returns metadata.","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all congruence checks — run_congruence_checks","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. run_congruence_checks(dir) #>  #> ── Running all congruence checks ─────────────────────────────────────────────── #>  #> ── Reading metadata ── #>  #> ── Checking metadata compliance ── #>  #> ✔ Your metadata is schema valid. #> ✔ Each data file name is used exactly once in the metadata file. #> ✔ Your EML version is supported. #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character #> ✔ Metadata indicates that each data file contains exactly one header row. #> ✔ Metadata indicates data files do not have footers. #> ✔ Metadata contains taxonomic coverage element. #> ✔ Metadata contains geographic coverage element #> ✔ Metadata contains a digital object identifier. #> ✔ All data table URLs correctly correspond to the DOI. #> ✔ Metadata contains publisher element. #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters. #> ✔ File names begin with a letter and do not contain spaces or special #>   characters. #>  #> ── Checking that metadata contains required elements for DataStore extraction ── #>  #> ! Publication date, 2022, predates the Data Package Reference Type. #> ✔ Data package title is present in metadata. #> ✔ Metadata states data was created by or for NPS. #> ✔ Metadata indicates the publisher is the National Park Service. #> ✔ Metadata indicates the publisher state is CO. #> ✔ Metadata indicates the publisher city is Fort Collins. #> ! The data package abstract contains non-standard characters: &amp;#13;. #> ✔ All dataTables listed in metadata have a unique file description. #> ! Data file 1 description is greater than 10 words. Consider a more concise #> description. #> ✖ The CUI dissemination code PUBVER is not a valid code. Use #>   `EMLeditor::set_cui()`. #> ✖ Metadata does not contain a license name. Use `EMLeditor::set_int_rights()` #>   to add a license name. #> ✔ Metadata contains an Intellectual Rights statement. #> ✔ All attributes listed in metadata have attribute definitions. #> ✔ All attributes listed in metadata have storage types associated with them. #> ✔ All attribute storage types are valid values. #>  #> ── Checking that metadata is consistent with data file(s) ── #>  #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files. #> ✔ All columns in data match all columns in metadata. #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes. #> ✔ Columns indicated as date/time in metadata are within the stated temporal #>   coverage range. #>  #> ── Summary ── #>  #> ✖ 2 errors to address #> ! 3 warnings to look into"},{"path":"/reference/test_attribute_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Test metadata for attribute definitions — test_attribute_defs","title":"Test metadata for attribute definitions — test_attribute_defs","text":"test_attribute_defs() extracts attributeNames attributeDefinitions EML metadata. tests make sure number attributeNames attributeDefinitions. true, test passes. , fails error. test looks metadata, look data files. Passing test mean data columns attributes metadata associated . test , see test_fields_match().","code":""},{"path":"/reference/test_attribute_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test metadata for attribute definitions — test_attribute_defs","text":"","code":"test_attribute_defs(metadata = load_metadata(directory))"},{"path":"/reference/test_attribute_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test metadata for attribute definitions — test_attribute_defs","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_attribute_defs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test metadata for attribute definitions — test_attribute_defs","text":"invisibly returns metadata","code":""},{"path":"/reference/test_attribute_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test metadata for attribute definitions — test_attribute_defs","text":"","code":"if (FALSE) { test_attribute_defs() }"},{"path":"/reference/test_by_for_nps.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for ","title":"Test for ","text":"Test \"NPS\"","code":""},{"path":"/reference/test_by_for_nps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for ","text":"","code":"test_by_for_nps(metadata = load_metadata(directory))"},{"path":"/reference/test_by_for_nps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for ","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_by_for_nps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for ","text":"invisibly returns metadata","code":""},{"path":"/reference/test_by_for_nps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for ","text":"test_by_for_nps() test presence \"NPS\" field. test fails error information missing metadata. test fails warning metadata indicate data created NPS (expected relatively rare). Otherwise test passes.","code":""},{"path":"/reference/test_by_for_nps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for ","text":"","code":"if (FALSE) { test_by_for_nps() }"},{"path":"/reference/test_cui_dissemination.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for CUI dissemination code — test_cui_dissemination","title":"Test for CUI dissemination code — test_cui_dissemination","text":"test_cui_dissemination() examines EML metadata presence Controlled Unclassified Information (CUI) dissemination code. function fails error code exist match list valid codes. valid code \"PUBLIC\" test produce warning. valid code results pass.","code":""},{"path":"/reference/test_cui_dissemination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for CUI dissemination code — test_cui_dissemination","text":"","code":"test_cui_dissemination(metadata = load_metadata(directory))"},{"path":"/reference/test_cui_dissemination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for CUI dissemination code — test_cui_dissemination","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_cui_dissemination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for CUI dissemination code — test_cui_dissemination","text":"invisibly returns metadata","code":""},{"path":"/reference/test_cui_dissemination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for CUI dissemination code — test_cui_dissemination","text":"","code":"if (FALSE) { test_cui_dissemination() }"},{"path":"/reference/test_datatable_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for consistency in data file URLs — test_datatable_urls","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"test_datatable_urls Checks make sure URLs listed data files correctly correspond DOI metadata. last 7 digits URL data tables identical last 7 digits DOI, test passes. DOI, test fails warning. data table lacks URL, test fails error. data table URL's last 7 digits identical DOI's last 7 digits, test fails error.","code":""},{"path":"/reference/test_datatable_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"","code":"test_datatable_urls(metadata = load_metadata(directory))"},{"path":"/reference/test_datatable_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"metadata","code":""},{"path":"/reference/test_datatable_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"invisible(metadata)","code":""},{"path":"/reference/test_datatable_urls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"suggestions functions use correct errors/warnings provided.","code":""},{"path":"/reference/test_datatable_urls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_datatable_urls(dir) #> Error: ✖ `metadata` must be an EML object."},{"path":"/reference/test_date_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Date Range — test_date_range","title":"Test Date Range — test_date_range","text":"test_date_range() verifies dates dataset consistent date range metadata.","code":""},{"path":"/reference/test_date_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Date Range — test_date_range","text":"","code":"test_date_range(directory = here::here(), metadata = load_metadata(directory))"},{"path":"/reference/test_date_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Date Range — test_date_range","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_date_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Date Range — test_date_range","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_date_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Date Range — test_date_range","text":"function checks columns identified date/time metadata. metadata lacks date range, function fails warning. fails warning dates contained columns outside temporal coverage specified metadata. date/time format string specified metadata match actual format date CSV, likely fail parse result failing test error. test also inform user file columns causing test fail failing (.e. outside date range failed parse).","code":""},{"path":"/reference/test_date_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Date Range — test_date_range","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_date_range(dir) #> ✔ Columns indicated as date/time in metadata are within the stated temporal #>   coverage range."},{"path":"/reference/test_delimiter.html","id":null,"dir":"Reference","previous_headings":"","what":"Field Delimiter Check — test_delimiter","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter() checks metadata file ensures data file field delimiter exactly one character (e.g. \", \").","code":""},{"path":"/reference/test_delimiter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Field Delimiter Check — test_delimiter","text":"","code":"test_delimiter(metadata = load_metadata(here::here()))"},{"path":"/reference/test_delimiter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Field Delimiter Check — test_delimiter","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_delimiter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Field Delimiter Check — test_delimiter","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_delimiter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter() examines fieldDelimiter element EML (currently EML supported) metadata determine many characters . fieldDelimiter element, test returns error. field delimiter anything exactly one character length, test returns error.","code":""},{"path":"/reference/test_delimiter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Field Delimiter Check — test_delimiter","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_delimiter(meta) #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character"},{"path":"/reference/test_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for presence of a Digital Object Identifier — test_doi","title":"Check for presence of a Digital Object Identifier — test_doi","text":"test_doi() checks whether DOI data package present metadata. currently validate DOI. DOI present, test passes. DOI present, test fails warning.","code":""},{"path":"/reference/test_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for presence of a Digital Object Identifier — test_doi","text":"","code":"test_doi(metadata = load_metadata(directory))"},{"path":"/reference/test_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for presence of a Digital Object Identifier — test_doi","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for presence of a Digital Object Identifier — test_doi","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for presence of a Digital Object Identifier — test_doi","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_doi(meta) #> ✔ Metadata contains a digital object identifier."},{"path":"/reference/test_dp_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML abstract — test_dp_abstract","title":"Test EML abstract — test_dp_abstract","text":"test_dp_abstract() inspects EML presence data package abstract. test Fails error abstract absent. abstract present, test fails warning abstract <20 words, >250 words, contains subset common characters indicate improper formatting. Otherwise test passes.","code":""},{"path":"/reference/test_dp_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML abstract — test_dp_abstract","text":"","code":"test_dp_abstract(metadata = load_metadata(directory))"},{"path":"/reference/test_dp_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML abstract — test_dp_abstract","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_dp_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML abstract — test_dp_abstract","text":"invisibly returns metadata","code":""},{"path":"/reference/test_dp_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML abstract — test_dp_abstract","text":"","code":"if (FALSE) { test_dp_abstract() }"},{"path":"/reference/test_dp_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data package title — test_dp_title","title":"Test data package title — test_dp_title","text":"test_dp_title() tests EML metadata presence data package title. test fails error title absent. test fails warning title > 15 words. Otherwise, test passes.","code":""},{"path":"/reference/test_dp_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data package title — test_dp_title","text":"","code":"test_dp_title(metadata = load_metadata(directory))"},{"path":"/reference/test_dp_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test data package title — test_dp_title","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_dp_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test data package title — test_dp_title","text":"invisibly returns metadata","code":""},{"path":"/reference/test_dp_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test data package title — test_dp_title","text":"","code":"if (FALSE) { test_dp_title() }"},{"path":"/reference/test_dup_meta_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"test_dup_meta_entries() tests see whether duplicate filenames listed data files (EML) metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"test_dup_meta_entries(metadata = load_metadata(here::here()))"},{"path":"/reference/test_dup_meta_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"specifically, test_dup_meta_entries() looks 'physical' elements metadata file, describe data file, asks whether duplicates entries objectName child element, file name data file stored. Duplicate entries result test failing error.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_dup_meta_entries(meta) #> ✔ Each data file name is used exactly once in the metadata file."},{"path":"/reference/test_fields_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Matching Data/Metadata Fields — test_fields_match","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match() compares attributes dataTable within EML metadata columns corresponding .csv. columns names order, test passes. columns differ, test fails error.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"test_fields_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_fields_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_fields_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_fields_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match briefly checks data files match, really run test_file_name_match() run test.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_fields_match(dir) #> ✔ All columns in data match all columns in metadata."},{"path":"/reference/test_file_descript.html","id":null,"dir":"Reference","previous_headings":"","what":"Test presence of file descriptions — test_file_descript","title":"Test presence of file descriptions — test_file_descript","text":"test_file_descript() tests presence file descriptions (entityDescription) fields. fails error one entityDescription fields empty dataTable. fails error two file descriptions identical. test fails warning file description longer 10 words shorter three words. Otherwise test passes.","code":""},{"path":"/reference/test_file_descript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test presence of file descriptions — test_file_descript","text":"","code":"test_file_descript(metadata = load_metadata(directory))"},{"path":"/reference/test_file_descript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test presence of file descriptions — test_file_descript","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_file_descript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test presence of file descriptions — test_file_descript","text":"invisibly returns metadata","code":""},{"path":"/reference/test_file_descript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test presence of file descriptions — test_file_descript","text":"","code":"if (FALSE) { test_file_descript() }"},{"path":"/reference/test_file_name_match.html","id":null,"dir":"Reference","previous_headings":"","what":"File Name Match — test_file_name_match","title":"File Name Match — test_file_name_match","text":"test_file_name_match() checks see whether data files (.csv) within specified directory listed objectName (child physical) element EML metadata file directory, vice versa. Mismatches result test failing error message.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Name Match — test_file_name_match","text":"","code":"test_file_name_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_file_name_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Name Match — test_file_name_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_file_name_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File Name Match — test_file_name_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_file_name_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File Name Match — test_file_name_match","text":"directory current working directory specified, test.file_name_match() returns current working directory exit. Note metadata file must follow NPS naming conventions, specifically ending *_metadata.xml. test.file_name_match() assumes number data files directory dataTables metadata file.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Name Match — test_file_name_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_file_name_match(dir) #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files."},{"path":"/reference/test_footer.html","id":null,"dir":"Reference","previous_headings":"","what":"Footer Check — test_footer","title":"Footer Check — test_footer","text":"test_footer() checks metadata files determine whether data files contain footer lines .","code":""},{"path":"/reference/test_footer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footer Check — test_footer","text":"","code":"test_footer(metadata = load_metadata(here::here()))"},{"path":"/reference/test_footer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footer Check — test_footer","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_footer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footer Check — test_footer","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_footer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Footer Check — test_footer","text":"footer lines present, data package passes test. footer lines present, data package fails test error user instructed remove footer lines prior data package upload. Currently EML metadata supported.","code":""},{"path":"/reference/test_footer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footer Check — test_footer","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_footer(meta) #> ✔ Metadata indicates data files do not have footers."},{"path":"/reference/test_geographic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Geographic Coverage — test_geographic_cov","title":"Check for Geographic Coverage — test_geographic_cov","text":"test_geographic_cov() checks geographic coverage element present metadata. perform validation geographic coverage information. geographicCoverage element present, test passes. absent, test fails warning.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Geographic Coverage — test_geographic_cov","text":"","code":"test_geographic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_geographic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Geographic Coverage — test_geographic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_geographic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Geographic Coverage — test_geographic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Geographic Coverage — test_geographic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_geographic_cov(meta) #> ✔ Metadata contains geographic coverage element"},{"path":"/reference/test_header_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Check — test_header_num","title":"Header Check — test_header_num","text":"test_header_num() checks metadata files ensure data file contains exactly one header row.","code":""},{"path":"/reference/test_header_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Check — test_header_num","text":"","code":"test_header_num(metadata = load_metadata(here::here()))"},{"path":"/reference/test_header_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Check — test_header_num","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_header_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Check — test_header_num","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_header_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Header Check — test_header_num","text":"test_header_num() examines numHeaderLines element EML (currently EML supported) metadata determine many header rows . header rows one header row, test fails error. test also fails error information number header rows.","code":""},{"path":"/reference/test_header_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Header Check — test_header_num","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_header_num(meta) #> ✔ Metadata indicates that each data file contains exactly one header row."},{"path":"/reference/test_int_rights.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of Intellectual Rights — test_int_rights","title":"Test for presence of Intellectual Rights — test_int_rights","text":"test_int_rights() tests presence text within intellectualRights element EML formatted metadata. text present, test passes. Otherwise, test fails. test_int_rights() makes attempt parse text test whether properly coincides CUI dissemination codes licenseName metadata. simple presence/absence test.","code":""},{"path":"/reference/test_int_rights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of Intellectual Rights — test_int_rights","text":"","code":"test_int_rights(metadata = load_metadata(directory))"},{"path":"/reference/test_int_rights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of Intellectual Rights — test_int_rights","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_int_rights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of Intellectual Rights — test_int_rights","text":"invisibly returns metadata","code":""},{"path":"/reference/test_int_rights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of Intellectual Rights — test_int_rights","text":"","code":"if (FALSE) { test_int_rights() }"},{"path":"/reference/test_license.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of a license name — test_license","title":"Test for presence of a license name — test_license","text":"test_license() examines licenseName element EML metadata. license name, test fails ab error. license name match list valid license names, test fails. metadata contain valid license name, license name CUI dissemination code agree, test fails error. Otherwise, test passes.  Additionally, license name \"Public Domain\" \"CC0 1.0 Universal\", function produce warning data package public.","code":""},{"path":"/reference/test_license.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of a license name — test_license","text":"","code":"test_license(metadata = load_metadata(directory))"},{"path":"/reference/test_license.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of a license name — test_license","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_license.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of a license name — test_license","text":"invisibly returns metadata","code":""},{"path":"/reference/test_license.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of a license name — test_license","text":"","code":"if (FALSE) { test_license() }"},{"path":"/reference/test_metadata_version.html","id":null,"dir":"Reference","previous_headings":"","what":"EML Version Check — test_metadata_version","title":"EML Version Check — test_metadata_version","text":"test_metadata_version() determines whether version metadata supplied meets current criteria NPS data package.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EML Version Check — test_metadata_version","text":"","code":"test_metadata_version(metadata = load_metadata(here::here()))"},{"path":"/reference/test_metadata_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EML Version Check — test_metadata_version","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_metadata_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EML Version Check — test_metadata_version","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_metadata_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EML Version Check — test_metadata_version","text":"currently EML supported. EML must version >= 2.2.0.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EML Version Check — test_metadata_version","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_metadata_version(meta) #> ✔ Your EML version is supported."},{"path":"/reference/test_numeric_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Numeric Fields — test_numeric_fields","title":"Test Numeric Fields — test_numeric_fields","text":"test_numeric_fields() verifies columns listed numeric metadata free non-numeric data. non-numeric data encountered, test fails error.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"test_numeric_fields(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_numeric_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Numeric Fields — test_numeric_fields","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_numeric_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Numeric Fields — test_numeric_fields","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_numeric_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Numeric Fields — test_numeric_fields","text":"\"NA\" missing data codes documented metadata cause test fail. Note test assumes column types metadata intended types, .e., metadata says column text actually numeric, caught test. hand, metadata indicates text column numeric, function generate error.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_numeric_fields(dir) #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes."},{"path":"/reference/test_publisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Publisher — test_publisher","title":"Check for Publisher — test_publisher","text":"test_publisher() checks publisher information present metadata, option require valid NPS publisher information. publisher information present, test passes. publisher information absent, test fails error. require_nps set TRUE (defaults FALSE), test also ensure valid NPS publisher information present. case, even publisher element present, test fail error unless publisher NPS (publisher fields exactly match expected information NPS data packages).","code":""},{"path":"/reference/test_publisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Publisher — test_publisher","text":"","code":"test_publisher(metadata = load_metadata(directory), require_nps = FALSE)"},{"path":"/reference/test_publisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Publisher — test_publisher","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. require_nps TRUE, throw error publisher information correct NPS published data.","code":""},{"path":"/reference/test_publisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Publisher — test_publisher","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_publisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Publisher — test_publisher","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_publisher(meta) #> ✔ Metadata contains publisher element."},{"path":"/reference/test_publisher_city.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML metadata for publisher city — test_publisher_city","title":"Test EML metadata for publisher city — test_publisher_city","text":"test_publisher_city() inspects publisher address EML metadata. fails error city element empty. fails warning \"Fort Collins\". test passes \"Fort Collins\"","code":""},{"path":"/reference/test_publisher_city.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML metadata for publisher city — test_publisher_city","text":"","code":"test_publisher_city(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_city.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML metadata for publisher city — test_publisher_city","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_publisher_city.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML metadata for publisher city — test_publisher_city","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_city.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML metadata for publisher city — test_publisher_city","text":"","code":"if (FALSE) { test_publisher_city() }"},{"path":"/reference/test_publisher_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests EML metadata for the publisher name — test_publisher_name","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"Tests EML metadata publisher name","code":""},{"path":"/reference/test_publisher_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"","code":"test_publisher_name(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_publisher_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"test_publisher_name() test presence data package publisher name. fails error publisher name missing, fails warning publisher name \"National Park Service\" (expected rare). Passes test publisher name \"National Park Service\"","code":""},{"path":"/reference/test_publisher_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"","code":"if (FALSE) { test_publisher_name() }"},{"path":"/reference/test_publisher_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML metadata for publisher state — test_publisher_state","title":"Test EML metadata for publisher state — test_publisher_state","text":"test_publisher_state() inspects publisher address EML metadata. test faisl error administrativeArea (state) element empty. test fails warning \"CO\" (, expected exceedingly rare). test passes \"CO\".","code":""},{"path":"/reference/test_publisher_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML metadata for publisher state — test_publisher_state","text":"","code":"test_publisher_state(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML metadata for publisher state — test_publisher_state","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_publisher_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML metadata for publisher state — test_publisher_state","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML metadata for publisher state — test_publisher_state","text":"","code":"if (FALSE) { test_publisher_state() }"},{"path":"/reference/test_pub_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Test publication date presence and ISO-8601 formatting — test_pub_date","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"test_pub_date() tests presence ISO-8601 formatting publication date. Also tests whether publication date within reasonable bounds; .e. date prior beginning data package Reference Type (2022) future year. publication date missing improperly formatted, test fails error. publication date outside reasonable range, test fails warning. Otherwiset test passes.","code":""},{"path":"/reference/test_pub_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"","code":"test_pub_date(metadata = load_metadata(directory))"},{"path":"/reference/test_pub_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_pub_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"invisibly returns metadata","code":""},{"path":"/reference/test_pub_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"","code":"if (FALSE) { meta <- load_metadata(DPchecker_example(\"BICY_Veg\")) test_pub_date(meta) }"},{"path":"/reference/test_storage_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests for attribute storage type — test_storage_type","title":"Tests for attribute storage type — test_storage_type","text":"test_storage_type() checks see number attributes (attributeName) storageTypes metadata. Equal numbers elements pass; unequal numbers fail test error. test_storage_type() attempt verify number storageType elements matches number columns data package data files (functionality, use test_fields_match()). test_storage_type() verifies storageType valid; .e. member accepted list possible storage types. Currently : string, float, date, factor, characters. Validity test based solely observed ezEML/EAL output (theory string storageType schema-valid). Invalid storageTypes result warning. test_storage_type() attempt verify value storageType logically matches type data corresponding column.","code":""},{"path":"/reference/test_storage_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests for attribute storage type — test_storage_type","text":"","code":"test_storage_type(metadata = load_metadata(directory))"},{"path":"/reference/test_storage_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests for attribute storage type — test_storage_type","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.#'","code":""},{"path":"/reference/test_storage_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests for attribute storage type — test_storage_type","text":"invisibly returns metadata","code":""},{"path":"/reference/test_storage_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests for attribute storage type — test_storage_type","text":"","code":"if (FALSE) { test_storage_type() }"},{"path":"/reference/test_taxonomic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Taxonomic Coverage — test_taxonomic_cov","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"'test_taxnomomic_cov()` checks whether taxonomic coverage element present metadata. perform validation taxonomic coverage information. taxonomic coverage present, test passes. absent, test fails warning.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"","code":"test_taxonomic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_taxonomic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Taxonomic Coverage — test_taxonomic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_taxonomic_cov(meta) #> ✔ Metadata contains taxonomic coverage element."},{"path":"/reference/test_validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Metadata Schema — test_validate_schema","title":"Validate Metadata Schema — test_validate_schema","text":"test_validate_schema() inspects metadata object loaded R determines whether schema-valid. test fails, functio produces error message.","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"test_validate_schema(metadata = load_metadata(here::here()))"},{"path":"/reference/test_validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Metadata Schema — test_validate_schema","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Metadata Schema — test_validate_schema","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_validate_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Metadata Schema — test_validate_schema","text":"currently, EML supported. now just wrapper form EML::eml_validate().","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_validate_schema(meta) #> ✔ Your metadata is schema valid."},{"path":"/reference/test_valid_fieldnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Field Names for Invalid Characters — test_valid_fieldnames","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"test_valid_fieldnames() checks field names (e.g data column names) metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter. invalid column names exist, test fail warning, otherwise test passes.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"test_valid_fieldnames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_fieldnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"run test_fields_match() run function, since function checks field names metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_fieldnames(meta) #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters."},{"path":"/reference/test_valid_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test File Names for Invalid Characters — test_valid_filenames","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"test_valid_filenames() checks file names metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter. Currently, invalid filenames result test failing warning, otherwise test passes.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"test_valid_filenames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"run test_file_name_match() run function, since function checks file names metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_filenames(meta) #> ✔ File names begin with a letter and do not contain spaces or special #>   characters."}]
>>>>>>> 37fe469019dfbb152fd770f6f476629c8165a137
