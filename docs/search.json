[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Baker. Maintainer, author. Sarah E. Wright. Author. Issac Quevedo. Contributor. Amelia Sherman. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker R, Wright SE (2023). DPchecker: Checks Data Packages Congruence. R package version 0.2.0, https://nationalparkservice.github.io/DPchecker/.","code":"@Manual{,   title = {DPchecker: Checks Data Packages for Congruence},   author = {Rob Baker and Sarah E. Wright},   year = {2023},   note = {R package version 0.2.0},   url = {https://nationalparkservice.github.io/DPchecker/}, }"},{"path":[]},{"path":"/index.html","id":"v020","dir":"","previous_headings":"","what":"v0.2.0","title":"Checks Data Packages for Congruence","text":"DPchecker (Data Package checker) package series functions NPS data package authors reviewers check internal consistency among data/meta data data package standards. Currently, EML metadata .csv data files supported. recommended store data files single metadata file (filename must end “metadata.xml”) directory. function runs single check imports data metadata necessary. prefer run checks , can use run_congruence_checks().","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Checks Data Packages for Congruence","text":"can install development version DPchecker GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/DPchecker\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples:","title":"Checks Data Packages for Congruence","text":"Run checks : Verify file names column names metadata match data:","code":"library(DPchecker)  # Get the directory where example data is stored (alternately, replace this with the path to your data folder)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  # Run all checks and summarize results  run_congruence_checks(dir)  # Alternately, if your data package is stored in the root of your R project folder, you don't need to pass any arguments run_congruence_checks() library(DPchecker)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  test_file_name_match(dir) test_fields_match(dir)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 DPchecker authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/convert_datetime_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EML date/time format string to one that R can parse — convert_datetime_format","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"Convert EML date/time format string one R can parse","code":""},{"path":"/reference/convert_datetime_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"","code":"convert_datetime_format(eml_format_string)"},{"path":"/reference/convert_datetime_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"eml_format_string character vector EML date/time format strings. function understands following codes: YYYY = four digit year, YY = two digit year, MMM = three letter month abbrev., MM = two digit month, DD = two digit day, hh HH = 24 hour time, mm = minutes, ss SS = seconds.","code":""},{"path":"/reference/convert_datetime_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"character vector date/time format strings can parsed readr strptime.","code":""},{"path":"/reference/convert_datetime_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"sophisticated function. EML format string valid, happily without complaint return R format string break code. warned.","code":""},{"path":"/reference/convert_datetime_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EML date/time format string to one that R can parse — convert_datetime_format","text":"","code":"convert_datetime_format(\"MM/DD/YYYY\") #> [1] \"%m/%d/%Y\" convert_datetime_format(c(\"MM/DD/YYYY\", \"YY-MM-DD\")) #> [1] \"%m/%d/%Y\" \"%y-%m-%d\""},{"path":"/reference/DPchecker-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Allows user (reviewer) check data package test whether meets congruence standards set forth NPS upload DataStore datapackage.","code":""},{"path":[]},{"path":"/reference/DPchecker-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Maintainer: Rob Baker robert_baker@nps.gov (ORCID) Authors: Sarah E. Wright sarah_wright@nps.gov contributors: Issac Quevedo [contributor] Amelia Sherman [contributor]","code":""},{"path":"/reference/DPchecker_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate path to example data — DPchecker_example","title":"Generate path to example data — DPchecker_example","text":"Generate path example data","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example(dp_name = c(\"BICY_veg\", \"BUIS_herps\"))"},{"path":"/reference/DPchecker_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate path to example data — DPchecker_example","text":"dp_name Name data package.","code":""},{"path":"/reference/DPchecker_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate path to example data — DPchecker_example","text":"Path example data, dp_name specified.","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example() #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"C:/Users/rlbaker/Documents/RDev/DPchecker_devspace/inst/extdata/BICY_veg\" DPchecker_example(\"BUIS_herps\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"C:/Users/rlbaker/Documents/RDev/DPchecker_devspace/inst/extdata/BUIS_herps\""},{"path":"/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data — load_data","title":"Load Data — load_data","text":"load_data inspects working directory data files. Loads existing data files tibble.","code":""},{"path":"/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data — load_data","text":"","code":"load_data(directory = here::here())"},{"path":"/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data — load_data","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory.","code":""},{"path":"/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data — load_data","text":"tibble .csvs","code":""},{"path":"/reference/load_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Data — load_data","text":"loads data files specified directory (default working directory) tibble later use congruence checking. Returns user working directory upon exit. Currently supports .csv files.","code":""},{"path":"/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data — load_data","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_data <- load_data(data_pkg_dir)"},{"path":"/reference/load_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Metadata — load_metadata","title":"Load Metadata — load_metadata","text":"load_metadata loads metadata file given path directory.","code":""},{"path":"/reference/load_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Metadata — load_metadata","text":"","code":"load_metadata(directory = here::here(), inform_success = FALSE)"},{"path":"/reference/load_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Metadata — load_metadata","text":"directory directory metadata file found - .e. data package. Defaults current project directory. inform_success Boolean indicating whether display message metadata successfully loaded.","code":""},{"path":"/reference/load_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Metadata — load_metadata","text":"R-object formatted EML metadata.","code":""},{"path":"/reference/load_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Metadata — load_metadata","text":"given path directory - default working directory -  load_metadata looks files ending *_metadata.xml. function quits warns user files found one file found. one metadata file found, checked one 3 formats: FGDC, ISO, EML. Currently EML supported function warn user quit non-EML metadata found. EML metadata file loaded R's work space future use congruence checking.","code":""},{"path":"/reference/load_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Metadata — load_metadata","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_metadata <- load_metadata(data_pkg_dir)"},{"path":"/reference/run_congruence_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all congruence checks — run_congruence_checks","title":"Run all congruence checks — run_congruence_checks","text":"Run congruence checks","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all congruence checks — run_congruence_checks","text":"","code":"run_congruence_checks(   directory = here::here(),   metadata = load_metadata(directory),   check_metadata_only = FALSE,   output_filename,   output_dir = here::here() )"},{"path":"/reference/run_congruence_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all congruence checks — run_congruence_checks","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. check_metadata_only run checks metadata skip anything involving data files. output_filename Optional. specified, saves results congruence checks file. omitted, prints results console. file already exists, results appended existing file. output_dir Location save output file, using.","code":""},{"path":"/reference/run_congruence_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all congruence checks — run_congruence_checks","text":"Invisibly returns metadata.","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all congruence checks — run_congruence_checks","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. run_congruence_checks(dir) #>  #> ── Running all congruence checks ─────────────────────────────────────────────── #>  #> ── Checking metadata compliance ── #>  #> ✔ Your metadata is schema valid. #> ✔ Each data file name is used exactly once in the metadata file. #> ✔ Your EML version is supported. #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character #> ✔ Metadata indicates that each data file contains exactly one header row. #> ✔ Metadata indicates data files do not have footers. #> ✔ Metadata contains taxonomic coverage element. #> ✔ Metadata contains geographic coverage element #> ✔ Metadata contains a digital object identifier. #> ✔ Metadata contains publisher element. #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters. #> ✔ File names begin with a letter and do not contain spaces or special #>   characters. #>  #> ── Checking that metadata is consistent with data file(s) ── #>  #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files. #> ✔ All columns in data match all columns in metadata. #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes. #> argument \"element\" is missing, with no default #>  #> ── Summary ── #>  #> ✖ 1 errors to address"},{"path":"/reference/test_date_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Date Range — test_date_range","title":"Test Date Range — test_date_range","text":"test_date_range verifies dates dataset consistent date range metadata.","code":""},{"path":"/reference/test_date_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Date Range — test_date_range","text":"","code":"test_date_range(directory = here::here(), metadata = load_metadata(directory))"},{"path":"/reference/test_date_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Date Range — test_date_range","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_date_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Date Range — test_date_range","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_date_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Date Range — test_date_range","text":"function checks columns identified date/time metadata. throws warning dates contained columns outside temporal coverage specified metadata. date/time format string specified metadata match actual format date CSV, likely fail parse throw error.","code":""},{"path":"/reference/test_date_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Date Range — test_date_range","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_date_range(dir) #> Error in eml_get(doc, element, from = \"list\"): argument \"element\" is missing, with no default"},{"path":"/reference/test_delimiter.html","id":null,"dir":"Reference","previous_headings":"","what":"Field Delimiter Check — test_delimiter","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter checks metadata file ensures data file field delimiter exactly one character (e.g. \", \").","code":""},{"path":"/reference/test_delimiter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Field Delimiter Check — test_delimiter","text":"","code":"test_delimiter(metadata = load_metadata(here::here()))"},{"path":"/reference/test_delimiter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Field Delimiter Check — test_delimiter","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_delimiter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Field Delimiter Check — test_delimiter","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_delimiter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter examines fieldDelimiter element EML (currently EML supported) metadata determine many characters . fieldDelimiter element, test returns error. field delimiter anything exactly one character length, test returns error.","code":""},{"path":"/reference/test_delimiter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Field Delimiter Check — test_delimiter","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_delimiter(meta) #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character"},{"path":"/reference/test_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for DOI\r\nChecks if DOI is present in metadata. Does not currently validate DOI. — test_doi","title":"Check for DOI\r\nChecks if DOI is present in metadata. Does not currently validate DOI. — test_doi","text":"Check DOI Checks DOI present metadata. currently validate DOI.","code":""},{"path":"/reference/test_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for DOI\r\nChecks if DOI is present in metadata. Does not currently validate DOI. — test_doi","text":"","code":"test_doi(metadata = load_metadata(directory))"},{"path":"/reference/test_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for DOI\r\nChecks if DOI is present in metadata. Does not currently validate DOI. — test_doi","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for DOI\r\nChecks if DOI is present in metadata. Does not currently validate DOI. — test_doi","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for DOI\r\nChecks if DOI is present in metadata. Does not currently validate DOI. — test_doi","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_geographic_cov(meta) #> ✔ Metadata contains geographic coverage element"},{"path":"/reference/test_dup_meta_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"test_dup_meta_entries test see whether duplicate filenames listed data files (EML) metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"test_dup_meta_entries(metadata = load_metadata(here::here()))"},{"path":"/reference/test_dup_meta_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"specifically, test_dup_meta_entries looks 'physical' elements metadata file, describe data file, asks whether duplicates entries objectName child element, file name data file stored.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_dup_meta_entries(meta) #> ✔ Each data file name is used exactly once in the metadata file."},{"path":"/reference/test_fields_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Matching Data/Metadata Fields — test_fields_match","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match compares attributes dataTable within EML metadata columns corresponding .csv. columns names order, test passes. columns differ, test fails.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"test_fields_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_fields_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_fields_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_fields_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match briefly checks data files match, really run test_file_name_match() run test.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_fields_match(dir) #> ✔ All columns in data match all columns in metadata."},{"path":"/reference/test_file_name_match.html","id":null,"dir":"Reference","previous_headings":"","what":"File Name Match — test_file_name_match","title":"File Name Match — test_file_name_match","text":"test_file_name_match checks see whether data files (.csv) within specified directory listed objectName (child physical) element EML metadata file directory, vice versa. Mismatches result error message.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Name Match — test_file_name_match","text":"","code":"test_file_name_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_file_name_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Name Match — test_file_name_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_file_name_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File Name Match — test_file_name_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_file_name_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File Name Match — test_file_name_match","text":"directory current working directory specified, test.fileNameMatch returns current working directory exit. Note metadata file must follow NPS naming conventions, specifically ending *_metadata.xml. test.fileNameMatch assumes number data files directory dataTables metadata file.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Name Match — test_file_name_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_file_name_match(dir) #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files."},{"path":"/reference/test_footer.html","id":null,"dir":"Reference","previous_headings":"","what":"Footer Check — test_footer","title":"Footer Check — test_footer","text":"test_footer checks metadata files determine whether data files contain footer lines .","code":""},{"path":"/reference/test_footer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footer Check — test_footer","text":"","code":"test_footer(metadata = load_metadata(here::here()))"},{"path":"/reference/test_footer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footer Check — test_footer","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_footer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footer Check — test_footer","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_footer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Footer Check — test_footer","text":"footer lines present, data package passes test. footer lines present, data package fails test user instructed remove footer lines prior data package upload. Currently EML metadata supported.","code":""},{"path":"/reference/test_footer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footer Check — test_footer","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_footer(meta) #> ✔ Metadata indicates data files do not have footers."},{"path":"/reference/test_geographic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Geographic Coverage\r\nChecks if geographic coverage element is present in metadata. Does not perform any validation of geographic coverage information. — test_geographic_cov","title":"Check for Geographic Coverage\r\nChecks if geographic coverage element is present in metadata. Does not perform any validation of geographic coverage information. — test_geographic_cov","text":"Check Geographic Coverage Checks geographic coverage element present metadata. perform validation geographic coverage information.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Geographic Coverage\r\nChecks if geographic coverage element is present in metadata. Does not perform any validation of geographic coverage information. — test_geographic_cov","text":"","code":"test_geographic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_geographic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Geographic Coverage\r\nChecks if geographic coverage element is present in metadata. Does not perform any validation of geographic coverage information. — test_geographic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_geographic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Geographic Coverage\r\nChecks if geographic coverage element is present in metadata. Does not perform any validation of geographic coverage information. — test_geographic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Geographic Coverage\r\nChecks if geographic coverage element is present in metadata. Does not perform any validation of geographic coverage information. — test_geographic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_geographic_cov(meta) #> ✔ Metadata contains geographic coverage element"},{"path":"/reference/test_header_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Check — test_header_num","title":"Header Check — test_header_num","text":"test_header_num checks metadata files ensure data file contains exactly one header row.","code":""},{"path":"/reference/test_header_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Check — test_header_num","text":"","code":"test_header_num(metadata = load_metadata(here::here()))"},{"path":"/reference/test_header_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Check — test_header_num","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_header_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Check — test_header_num","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_header_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Header Check — test_header_num","text":"test_header_num examines numHeaderLines element EML (currently EML supported) metadata determine many header rows . header rows one header row, test fails. test also fails information number header rows.","code":""},{"path":"/reference/test_header_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Header Check — test_header_num","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_header_num(meta) #> ✔ Metadata indicates that each data file contains exactly one header row."},{"path":"/reference/test_metadata_version.html","id":null,"dir":"Reference","previous_headings":"","what":"EML Version Check — test_metadata_version","title":"EML Version Check — test_metadata_version","text":"test_metadata_version determines whether version metadata supplied meets current criteria NPS data package.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EML Version Check — test_metadata_version","text":"","code":"test_metadata_version(metadata = load_metadata(here::here()))"},{"path":"/reference/test_metadata_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EML Version Check — test_metadata_version","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_metadata_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EML Version Check — test_metadata_version","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_metadata_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EML Version Check — test_metadata_version","text":"currently EML supported. EML must version >= 2.2.0.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EML Version Check — test_metadata_version","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_metadata_version(meta) #> ✔ Your EML version is supported."},{"path":"/reference/test_numeric_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Numeric Fields — test_numeric_fields","title":"Test Numeric Fields — test_numeric_fields","text":"test_numeric_fields verifies columns listed numeric metadata free non-numeric data.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"test_numeric_fields(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_numeric_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Numeric Fields — test_numeric_fields","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_numeric_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Numeric Fields — test_numeric_fields","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_numeric_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Numeric Fields — test_numeric_fields","text":"\"NA\" missing data codes documented metadata cause test fail. Note test assumes column types metadata intended types, .e., metadata says column text actually numeric, caught test.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_numeric_fields(dir) #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes."},{"path":"/reference/test_publisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Publisher\r\nChecks if publisher information is present in metadata, with option to require valid NPS publisher information. — test_publisher","title":"Check for Publisher\r\nChecks if publisher information is present in metadata, with option to require valid NPS publisher information. — test_publisher","text":"Check Publisher Checks publisher information present metadata, option require valid NPS publisher information.","code":""},{"path":"/reference/test_publisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Publisher\r\nChecks if publisher information is present in metadata, with option to require valid NPS publisher information. — test_publisher","text":"","code":"test_publisher(metadata = load_metadata(directory), require_nps = FALSE)"},{"path":"/reference/test_publisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Publisher\r\nChecks if publisher information is present in metadata, with option to require valid NPS publisher information. — test_publisher","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. require_nps TRUE, throw error publisher information correct NPS published data.","code":""},{"path":"/reference/test_publisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Publisher\r\nChecks if publisher information is present in metadata, with option to require valid NPS publisher information. — test_publisher","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_publisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Publisher\r\nChecks if publisher information is present in metadata, with option to require valid NPS publisher information. — test_publisher","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_publisher(meta) #> ✔ Metadata contains publisher element."},{"path":"/reference/test_taxonomic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Taxonomic Coverage\r\nChecks if taxonomic coverage element is present in metadata. Does not perform any validation of taxonomic coverage information. — test_taxonomic_cov","title":"Check for Taxonomic Coverage\r\nChecks if taxonomic coverage element is present in metadata. Does not perform any validation of taxonomic coverage information. — test_taxonomic_cov","text":"Check Taxonomic Coverage Checks taxonomic coverage element present metadata. perform validation taxonomic coverage information.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Taxonomic Coverage\r\nChecks if taxonomic coverage element is present in metadata. Does not perform any validation of taxonomic coverage information. — test_taxonomic_cov","text":"","code":"test_taxonomic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_taxonomic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Taxonomic Coverage\r\nChecks if taxonomic coverage element is present in metadata. Does not perform any validation of taxonomic coverage information. — test_taxonomic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Taxonomic Coverage\r\nChecks if taxonomic coverage element is present in metadata. Does not perform any validation of taxonomic coverage information. — test_taxonomic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Taxonomic Coverage\r\nChecks if taxonomic coverage element is present in metadata. Does not perform any validation of taxonomic coverage information. — test_taxonomic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_taxonomic_cov(meta) #> ✔ Metadata contains taxonomic coverage element."},{"path":"/reference/test_validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Metadata Schema — test_validate_schema","title":"Validate Metadata Schema — test_validate_schema","text":"test_validate_schema inspects metadata object loaded R determines whether schema-valid.","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"test_validate_schema(metadata = load_metadata(here::here()))"},{"path":"/reference/test_validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Metadata Schema — test_validate_schema","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Metadata Schema — test_validate_schema","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_validate_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Metadata Schema — test_validate_schema","text":"currently, EML supported. now just wrapper form EML::eml_validate().","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_validate_schema(meta) #> ✔ Your metadata is schema valid."},{"path":"/reference/test_valid_fieldnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Field Names for Invalid Characters — test_valid_fieldnames","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"test_valid_fieldnames checks field names metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"test_valid_fieldnames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_fieldnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"run test_fields_match() run function, since function checks field names metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_fieldnames(meta) #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters."},{"path":"/reference/test_valid_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test File Names for Invalid Characters — test_valid_filenames","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"test_valid_filenames checks file names metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"test_valid_filenames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"run test_file_name_match() run function, since function checks file names metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_filenames(meta) #> ✔ File names begin with a letter and do not contain spaces or special #>   characters."}]
